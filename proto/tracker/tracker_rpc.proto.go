// Code generated by speedfs-rpcgen. DO NOT EDIT.

package tracker

import (
	"context"
	"net"
	"syscall"

	"github.com/speedfs/speedfs/proto"
)

type method func(ctx context.Context, buf []byte) (proto.Message, error)

type handler struct {
	service *service
	methods [256]method
}

func NewHandler(service Service) proto.Handler {
	h := &handler{
		service: newService(service),
	}
	h.initMethods()
	return h
}

func (h *handler) Handle(ctx context.Context, cmd uint8, buf []byte) (proto.Message, error) {
	method := h.methods[cmd]
	if method == nil {
		return nil, syscall.EINVAL
	}
	return method(ctx, buf)
}

func (h *handler) initMethods() {
	h.methods[CmdQueryStorage] = h.service.QueryStorage
}

type service struct {
	s Service
}

func newService(s Service) *service {
	return &service{
		s: s,
	}
}

func (s *service) QueryStorage(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(QueryStorageCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.QueryStorage(ctx, cmd)
}

type Client struct {
	c *proto.Conn
}

func NewClient(conn net.Conn) *Client {
	return &Client{
		c: proto.NewConn(conn),
	}
}

func (c *Client) QueryStorage(ctx context.Context, cmd *QueryStorageCommand) (*QueryStorageReply, error) {
	reply := new(QueryStorageReply)
	if err := c.c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}
