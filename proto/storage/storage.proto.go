// Code generated by speedfs-rpcgen. DO NOT EDIT.

package storage

import (
	"github.com/speedfs/speedfs/rpc"
)

// EncodeTo
func (x *ReportStorageIDCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.StorageID[:])
}

// DecodeFrom
func (x *ReportStorageIDCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.StorageID[:]); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *ReportStorageIDCommand) Cmd() rpc.Cmd {
	return CmdReportStorageID
}

// EncodeTo
func (x *ReportStorageIDReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *ReportStorageIDReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *ReportStorageIDReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *UploadFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint8(x.StorePathIndex)
	enc.EncodeUint64(x.MetadataLen)
	enc.EncodeUint64(x.Size)
	enc.EncodeBytes(x.Ext[:])
	enc.EncodeBytes(x.Metadata[:])
	enc.EncodeBytes(x.Content[:])
}

// DecodeFrom
func (x *UploadFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.StorePathIndex, err = dec.DecodeUint8(); err != nil {
		return err
	}
	if x.MetadataLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if err = dec.DecodeBytes(x.Ext[:]); err != nil {
		return err
	}
	x.Metadata = make([]byte, x.MetadataLen)
	if err = dec.DecodeBytes(x.Metadata); err != nil {
		return err
	}
	x.Content = make([]byte, x.Size)
	if err = dec.DecodeBytes(x.Content); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *UploadFileCommand) Cmd() rpc.Cmd {
	return CmdUploadFile
}

// EncodeTo
func (x *UploadFileReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *UploadFileReply) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *UploadFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *UploadAppenderFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint8(x.StorePathIndex)
	enc.EncodeUint64(x.MetadataLen)
	enc.EncodeUint64(x.Size)
	enc.EncodeBytes(x.Ext[:])
	enc.EncodeBytes(x.Metadata[:])
	enc.EncodeBytes(x.Content[:])
}

// DecodeFrom
func (x *UploadAppenderFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.StorePathIndex, err = dec.DecodeUint8(); err != nil {
		return err
	}
	if x.MetadataLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if err = dec.DecodeBytes(x.Ext[:]); err != nil {
		return err
	}
	x.Metadata = make([]byte, x.MetadataLen)
	if err = dec.DecodeBytes(x.Metadata); err != nil {
		return err
	}
	x.Content = make([]byte, x.Size)
	if err = dec.DecodeBytes(x.Content); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *UploadAppenderFileCommand) Cmd() rpc.Cmd {
	return CmdUploadAppenderFile
}

// EncodeTo
func (x *UploadAppenderFileReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *UploadAppenderFileReply) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *UploadAppenderFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *DeleteFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *DeleteFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *DeleteFileCommand) Cmd() rpc.Cmd {
	return CmdDeleteFile
}

// EncodeTo
func (x *DeleteFileReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *DeleteFileReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *DeleteFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *SetMetadataCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.FilenameLen)
	enc.EncodeUint64(x.MetadataLen)
	enc.EncodeByte(x.Flag)
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
	enc.EncodeString(x.Metadata)
}

// DecodeFrom
func (x *SetMetadataCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.FilenameLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.MetadataLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Flag, err = dec.DecodeByte(); err != nil {
		return err
	}
	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	{
		buf := make([]byte, x.FilenameLen)
		if err = dec.DecodeBytes(buf); err != nil {
			return err
		}
		x.Filename = string(buf)
	}
	{
		buf := make([]byte, x.MetadataLen)
		if err = dec.DecodeBytes(buf); err != nil {
			return err
		}
		x.Metadata = string(buf)
	}

	return nil
}

// Cmd
func (x *SetMetadataCommand) Cmd() rpc.Cmd {
	return CmdSetMetadata
}

// EncodeTo
func (x *SetMetadataReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *SetMetadataReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *SetMetadataReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *GetMetadataCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *GetMetadataCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *GetMetadataCommand) Cmd() rpc.Cmd {
	return CmdGetMetadata
}

// EncodeTo
func (x *GetMetadataReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeString(x.Metadata)
}

// DecodeFrom
func (x *GetMetadataReply) DecodeFrom(dec *rpc.Decoder) error {

	x.Metadata = string(dec.Bytes())

	return nil
}

// Cmd
func (x *GetMetadataReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *DownloadFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.Offset)
	enc.EncodeUint64(x.Size)
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *DownloadFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.Offset, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *DownloadFileCommand) Cmd() rpc.Cmd {
	return CmdDownloadFile
}

// EncodeTo
func (x *DownloadFileReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.Content[:])
}

// DecodeFrom
func (x *DownloadFileReply) DecodeFrom(dec *rpc.Decoder) error {

	x.Content = dec.Bytes()

	return nil
}

// Cmd
func (x *DownloadFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *GetFileInfoCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *GetFileInfoCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *GetFileInfoCommand) Cmd() rpc.Cmd {
	return CmdGetFileInfo
}

// EncodeTo
func (x *GetFileInfoReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.Size)
	enc.EncodeUint64(x.CreateTime)
	enc.EncodeUint64(x.CRC32)
	enc.EncodeBytes(x.SourceIP[:])
}

// DecodeFrom
func (x *GetFileInfoReply) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.CreateTime, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.CRC32, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if err = dec.DecodeBytes(x.SourceIP[:]); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *GetFileInfoReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *AppendFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.FilenameLen)
	enc.EncodeUint64(x.Size)
	enc.EncodeString(x.Filename)
	enc.EncodeBytes(x.Content[:])
}

// DecodeFrom
func (x *AppendFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.FilenameLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	{
		buf := make([]byte, x.FilenameLen)
		if err = dec.DecodeBytes(buf); err != nil {
			return err
		}
		x.Filename = string(buf)
	}
	x.Content = make([]byte, x.Size)
	if err = dec.DecodeBytes(x.Content); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *AppendFileCommand) Cmd() rpc.Cmd {
	return CmdAppendFile
}

// EncodeTo
func (x *AppendFileReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *AppendFileReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *AppendFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *ModifyFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.FilenameLen)
	enc.EncodeUint64(x.Offset)
	enc.EncodeUint64(x.Size)
	enc.EncodeString(x.Filename)
	enc.EncodeBytes(x.Content[:])
}

// DecodeFrom
func (x *ModifyFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.FilenameLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Offset, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	{
		buf := make([]byte, x.FilenameLen)
		if err = dec.DecodeBytes(buf); err != nil {
			return err
		}
		x.Filename = string(buf)
	}
	x.Content = make([]byte, x.Size)
	if err = dec.DecodeBytes(x.Content); err != nil {
		return err
	}

	return nil
}

// Cmd
func (x *ModifyFileCommand) Cmd() rpc.Cmd {
	return CmdModifyFile
}

// EncodeTo
func (x *ModifyFileReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *ModifyFileReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *ModifyFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *TruncateFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeUint64(x.FilenameLen)
	enc.EncodeUint64(x.Size)
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *TruncateFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if x.FilenameLen, err = dec.DecodeUint64(); err != nil {
		return err
	}
	if x.Size, err = dec.DecodeUint64(); err != nil {
		return err
	}
	{
		buf := make([]byte, x.FilenameLen)
		if err = dec.DecodeBytes(buf); err != nil {
			return err
		}
		x.Filename = string(buf)
	}

	return nil
}

// Cmd
func (x *TruncateFileCommand) Cmd() rpc.Cmd {
	return CmdTruncateFile
}

// EncodeTo
func (x *TruncateFileReply) EncodeTo(enc *rpc.Encoder) {
}

// DecodeFrom
func (x *TruncateFileReply) DecodeFrom(dec *rpc.Decoder) error {

	return nil
}

// Cmd
func (x *TruncateFileReply) Cmd() rpc.Cmd {
	return CmdReply
}

// EncodeTo
func (x *RenameFileCommand) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *RenameFileCommand) DecodeFrom(dec *rpc.Decoder) error {

	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *RenameFileCommand) Cmd() rpc.Cmd {
	return CmdRenameFile
}

// EncodeTo
func (x *RenameFileReply) EncodeTo(enc *rpc.Encoder) {
	enc.EncodeBytes(x.GroupName[:])
	enc.EncodeString(x.Filename)
}

// DecodeFrom
func (x *RenameFileReply) DecodeFrom(dec *rpc.Decoder) error {

	var err error

	if err = dec.DecodeBytes(x.GroupName[:]); err != nil {
		return err
	}
	x.Filename = string(dec.Bytes())

	return nil
}

// Cmd
func (x *RenameFileReply) Cmd() rpc.Cmd {
	return CmdReply
}
