// Code generated by speedfs-gen. DO NOT EDIT.

package storage

import (
	"context"
	"net"
	"syscall"

	"github.com/speedfs/speedfs/proto"
)

type method func(ctx context.Context, buf []byte) (proto.Message, error)

type handler struct {
	methods [256]method
	service *service
}

func NewHandler(service StorageService) proto.Handler {
	h := &handler{
		service: newService(service),
	}
	h.initMethods()
	return h
}

func (h *handler) Handle(ctx context.Context, cmd uint8, buf []byte) (proto.Message, error) {
	method := h.methods[cmd]
	if method == nil {
		return nil, syscall.EINVAL
	}
	return method(ctx, buf)
}

func (h *handler) initMethods() {
	h.methods[CmdUploadFile] = h.service.UploadFile
	h.methods[CmdUploadAppenderFile] = h.service.UploadAppenderFile
	h.methods[CmdSetMetadata] = h.service.SetMetadata
	h.methods[CmdGetMetadata] = h.service.GetMetadata
	h.methods[CmdDownloadFile] = h.service.DownloadFile
	h.methods[CmdAppendFile] = h.service.AppendFile
	h.methods[CmdModifyFile] = h.service.ModifyFile
	h.methods[CmdTruncateFile] = h.service.TruncateFile
	h.methods[CmdRenameFile] = h.service.RenameFile
}

type service struct {
	s StorageService
}

func newService(s StorageService) *service {
	return &service{
		s: s,
	}
}

func (s *service) UploadFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(UploadFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.UploadFile(ctx, cmd)
}

func (s *service) UploadAppenderFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(UploadAppenderFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.UploadAppenderFile(ctx, cmd)
}

func (s *service) SetMetadata(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(SetMetadataCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.SetMetadata(ctx, cmd)
}

func (s *service) GetMetadata(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(GetMetadataCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.GetMetadata(ctx, cmd)
}

func (s *service) DownloadFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(DownloadFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.DownloadFile(ctx, cmd)
}

func (s *service) AppendFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(AppendFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.AppendFile(ctx, cmd)
}

func (s *service) ModifyFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(ModifyFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.ModifyFile(ctx, cmd)
}

func (s *service) TruncateFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(TruncateFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.TruncateFile(ctx, cmd)
}

func (s *service) RenameFile(ctx context.Context, buf []byte) (proto.Message, error) {
	cmd := new(RenameFileCommand)
	dec := proto.NewDecoder(buf)

	if err := cmd.DecodeFrom(dec); err != nil {
		return nil, err
	}

	return s.s.RenameFile(ctx, cmd)
}

type Conn struct {
	*proto.Conn
}

func NewConn(conn net.Conn) *Conn {
	return &Conn{
		Conn: proto.NewConn(conn),
	}
}

func (c *Conn) UploadFile(ctx context.Context, cmd *UploadFileCommand) (*UploadFileReply, error) {
	reply := new(UploadFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) UploadAppenderFile(ctx context.Context, cmd *UploadAppenderFileCommand) (*UploadAppenderFileReply, error) {
	reply := new(UploadAppenderFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) SetMetadata(ctx context.Context, cmd *SetMetadataCommand) (*SetMetadataReply, error) {
	reply := new(SetMetadataReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) GetMetadata(ctx context.Context, cmd *GetMetadataCommand) (*GetMetadataReply, error) {
	reply := new(GetMetadataReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) DownloadFile(ctx context.Context, cmd *DownloadFileCommand) (*DownloadFileReply, error) {
	reply := new(DownloadFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) AppendFile(ctx context.Context, cmd *AppendFileCommand) (*AppendFileReply, error) {
	reply := new(AppendFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) ModifyFile(ctx context.Context, cmd *ModifyFileCommand) (*ModifyFileReply, error) {
	reply := new(ModifyFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) TruncateFile(ctx context.Context, cmd *TruncateFileCommand) (*TruncateFileReply, error) {
	reply := new(TruncateFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}

func (c *Conn) RenameFile(ctx context.Context, cmd *RenameFileCommand) (*RenameFileReply, error) {
	reply := new(RenameFileReply)
	if err := c.Call(ctx, cmd, reply); err != nil {
		return nil, err
	}
	return reply, nil
}
